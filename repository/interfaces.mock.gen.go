// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/interfaces.mock.gen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockRepositoryInterface) CreateEstate(ctx context.Context, input CreateEstateInput) (CreateEstateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, input)
	ret0, _ := ret[0].(CreateEstateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstate(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstate), ctx, input)
}

// GetEstateStats mocks base method.
func (m *MockRepositoryInterface) GetEstateStats(ctx context.Context, input GetEstateStatsInput) (GetEstateStatsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateStats", ctx, input)
	ret0, _ := ret[0].(GetEstateStatsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateStats indicates an expected call of GetEstateStats.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstateStats(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateStats", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstateStats), ctx, input)
}

// PlanDronePatrol mocks base method.
func (m *MockRepositoryInterface) PlanDronePatrol(ctx context.Context, input PlanDronePatrolInput) (PlanDronePatrolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanDronePatrol", ctx, input)
	ret0, _ := ret[0].(PlanDronePatrolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlanDronePatrol indicates an expected call of PlanDronePatrol.
func (mr *MockRepositoryInterfaceMockRecorder) PlanDronePatrol(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanDronePatrol", reflect.TypeOf((*MockRepositoryInterface)(nil).PlanDronePatrol), ctx, input)
}

// SetTreeHeight mocks base method.
func (m *MockRepositoryInterface) SetTreeHeight(ctx context.Context, input SetTreeHeightInput) (SetTreeHeightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTreeHeight", ctx, input)
	ret0, _ := ret[0].(SetTreeHeightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTreeHeight indicates an expected call of SetTreeHeight.
func (mr *MockRepositoryInterfaceMockRecorder) SetTreeHeight(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTreeHeight", reflect.TypeOf((*MockRepositoryInterface)(nil).SetTreeHeight), ctx, input)
}
